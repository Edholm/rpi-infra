apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-local-etc-volume
  namespace: infra
  labels:
    directory: etc
    app: pihole
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  local:
    path: /mnt/pihole/etc
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: disktype
              operator: In
              values:
                - ssd
                - infra
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-local-dnsmasqd-volume
  namespace: infra
  labels:
    directory: dnsmasqd
    app: pihole
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  local:
    path: /mnt/pihole/dnsmasq.d
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: disktype
              operator: In
              values:
                - ssd
                - infra
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-local-etc-claim
  namespace: infra
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  selector:
    matchLabels:
      directory: etc
      app: pihole
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-local-dnsmasqd-claim
  namespace: infra
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  selector:
    matchLabels:
      directory: dnsmasqd
      app: pihole
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
  namespace: infra
  labels:
    app: pihole
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
        name: pihole
    spec:
      terminationGracePeriodSeconds: 60
      nodeSelector:
        node-type: infra
      containers:
        - name: pihole
          image: pihole/pihole:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: VIRTUAL_HOST
              value: pihole.k8s.elee.cloud
            - name: TZ
              value: "Europe/Stockholm"
            - name: WEBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pihole-webpassword
                  key: password
          volumeMounts:
            - name: pihole-local-etc-volume
              mountPath: "/etc/pihole"
            - name: pihole-local-dnsmasqd-volume
              mountPath: "/etc/dnsmasq.d"
      volumes:
        - name: pihole-local-etc-volume
          persistentVolumeClaim:
            claimName: pihole-local-etc-claim
        - name: pihole-local-dnsmasqd-volume
          persistentVolumeClaim:
            claimName: pihole-local-dnsmasqd-claim
---
apiVersion: v1
kind: Service
metadata:
  name: pihole
  namespace: infra
spec:
  selector:
    app: pihole
  ports:
    - port: 80
      name: pihole-admin
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    metallb.universe.tf/address-pool: default
    metallb.universe.tf/allow-shared-ip: infra-node
  name: pihole-dns-udp
  namespace: infra
spec:
  selector:
    app: pihole
  type: LoadBalancer
  externalTrafficPolicy: Local
  loadBalancerIP: 192.168.10.1
  ports:
    - port: 53
      protocol: UDP
      name: dns-udp
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    metallb.universe.tf/address-pool: default
    metallb.universe.tf/allow-shared-ip: infra-node
  name: pihole-dns-tcp
  namespace: infra
spec:
  selector:
    app: pihole
  type: LoadBalancer
  externalTrafficPolicy: Local
  loadBalancerIP: 192.168.10.1
  ports:
    - port: 53
      protocol: TCP
      name: dns-tcp
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: pihole-http
  namespace: infra
  labels:
    expose: internal
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`pihole.k8s.elee.cloud`)
      kind: Rule
      services:
        - name: pihole
          port: 80
      middlewares:
        - name: secured-local
          namespace: middleware
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: pihole-https
  namespace: infra
  labels:
    expose: internal
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`pihole.k8s.elee.cloud`)
      kind: Rule
      services:
        - name: pihole
          port: 80
      middlewares:
        - name: secured-local
          namespace: middleware
  tls:
    certResolver: namecheap
    options:
      name: default
      namespace: infra
